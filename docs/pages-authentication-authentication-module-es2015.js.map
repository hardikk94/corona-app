{"version":3,"sources":["./src/app/pages/authentication/auth-routing.module.ts","./src/app/pages/authentication/authentication.module.ts","./src/app/pages/authentication/components/login/login.component.ts","./src/app/pages/authentication/components/login/login.component.html"],"names":[],"mappings":"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","file":"pages-authentication-authentication-module-es2015.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        children: [\n            {\n                path: '',\n                component: LoginComponent\n            }\n\n        ]\n    }\n]\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AuthRoutingModule {\n    constructor() {\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { LoginComponent } from './components/login/login.component';\nimport { AuthRoutingModule } from './auth-routing.module'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    AuthRoutingModule,  \n    ReactiveFormsModule,\n    CommonModule\n  ],\n  providers:[]\n})\nexport class AuthenticationModule { }\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { AuthStoreService } from \"./../../../../store/stores/auth.store\";\nimport { Store } from \"@ngrx/store\";\nimport { AppState } from \"src/app/store/states/app.state\";\nimport { LoadingShowRequested } from \"src/app/store/actions/loading.action\";\nimport { LoadingState } from \"src/app/store/states/loading.state\";\nimport { AuthState } from \"src/app/store/states/auth.state\";\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"]\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  public loginForm: FormGroup;\n  public loginSubscriber;\n  constructor(    \n    public router: Router,\n    public authStoreSevice: AuthStoreService,\n    private store: Store<AppState>,\n    public formBuilder: FormBuilder\n  ) {}\n\n  public ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", [Validators.required, Validators.minLength(8)]]\n    });\n\n    this.loginSubscriber = this.authStoreSevice\n      .storeSelect()\n      .subscribe((response: AuthState) => {\n        if (response.success) {\n          sessionStorage.setItem(\"email\",response.userData.email);\n          sessionStorage.setItem(\"authtoken\",response.userData.authToken);\n          this.router.navigate([\"home\"]);\n        }\n      });\n  }\n\n  public ngOnDestroy() {\n    if (this.loginSubscriber) {\n      this.loginSubscriber.unsubscribe();\n    }\n  }\n\n  public login() {    \n    let loadingState: LoadingState = {\n      isLoading: true,\n      message: \"Authenticating...\"\n    };\n    this.store.dispatch(new LoadingShowRequested(loadingState));\n    this.authStoreSevice.dispatchLoginAction(this.loginForm.value);\n  }\n}\n","<div class=\"login-page-wrapper\">\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-lg-5 col-md-6 col-xs-12 leftside\">\n        <img src=\"assets/images/img-leftside-login.png\" alt=\"Corona front ene image\">        \n      </div>\n      <div class=\"col-lg-7 col-md-6 col-xs-12 rightside\">\n        <div class=\"login-form-wrapper\">\n          <div class=\"logo-title\">\n            Covid-19 Tracker\n          </div>\n          <div class=\"info-title\">\n            Welcome back!Please login to your account.           \n          </div>\n          <div class=\"login-form\">\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n              <div class=\"form-group\">\n                <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email\" formControlName=\"email\"\n                  name=\"email\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Email\" />                  \n                <span *ngIf=\"\n                    (loginForm.get('email').dirty ||\n                      loginForm.get('email').touched) &&\n                    !loginForm.get('email').valid\n                  \" class=\"form-field-error\">\n                  <span *ngIf=\"\n                      loginForm.get('email')?.errors?.email;\n                      else emailRequire\n                    \">Email is not valid.</span>\n                  <ng-template #emailRequire>\n                    <span>Email is required..</span>\n                  </ng-template>\n                </span>\n              </div>\n\n              <div class=\"form-group\">\n                <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"password\"\n                  formControlName=\"password\" name=\"password\" autocomplete=\"true\" data-toggle=\"tooltip\"\n                  data-placement=\"top\" title=\"password\" />\n                <span *ngIf=\"\n                    (loginForm.get('password').dirty ||\n                      loginForm.get('password').touched) &&\n                    !loginForm.get('password').valid\n                  \" class=\"form-field-error\">\n                  <span *ngIf=\"\n                      loginForm.get('password')?.errors?.minlength;\n                      else passwordRequire\n                    \">Password should be minimum 8 characters long.</span>\n                  <ng-template #passwordRequire>\n                    <span>Password is required.</span>\n                  </ng-template>\n                </span>\n              </div>             \n\n              <div class=\"action-btns-row\">              \n                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!loginForm.valid\">\n                  Login\n                </button>\n              </div>\n            </form>\n          </div>         \n        </div>\n      </div>\n    </div>\n  </div>\n</div>"],"sourceRoot":"webpack:///"}