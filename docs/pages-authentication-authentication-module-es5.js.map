{"version":3,"sources":["webpack:///src/app/pages/authentication/auth-routing.module.ts","webpack:///src/app/pages/authentication/authentication.module.ts","webpack:///src/app/pages/authentication/components/login/login.component.ts","webpack:///src/app/pages/authentication/components/login/login.component.html"],"names":["routes","path","children","component","AuthRoutingModule","forChild","imports","exports","AuthenticationModule","declarations","providers","LoginComponent","router","authStoreSevice","store","formBuilder","loginForm","group","email","required","password","minLength","loginSubscriber","storeSelect","subscribe","response","success","sessionStorage","setItem","userData","authToken","navigate","unsubscribe","loadingState","isLoading","message","dispatch","dispatchLoginAction","value","login","selector","templateUrl","styleUrls"],"mappings":"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","file":"pages-authentication-authentication-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        children: [\n            {\n                path: '',\n                component: LoginComponent\n            }\n\n        ]\n    }\n]\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AuthRoutingModule {\n    constructor() {\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { LoginComponent } from './components/login/login.component';\nimport { AuthRoutingModule } from './auth-routing.module'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    AuthRoutingModule,  \n    ReactiveFormsModule,\n    CommonModule\n  ],\n  providers:[]\n})\nexport class AuthenticationModule { }\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { AuthStoreService } from \"./../../../../store/stores/auth.store\";\nimport { Store } from \"@ngrx/store\";\nimport { AppState } from \"src/app/store/states/app.state\";\nimport { LoadingShowRequested } from \"src/app/store/actions/loading.action\";\nimport { LoadingState } from \"src/app/store/states/loading.state\";\nimport { AuthState } from \"src/app/store/states/auth.state\";\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"]\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  public loginForm: FormGroup;\n  public loginSubscriber;\n  constructor(    \n    public router: Router,\n    public authStoreSevice: AuthStoreService,\n    private store: Store<AppState>,\n    public formBuilder: FormBuilder\n  ) {}\n\n  public ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", [Validators.required, Validators.minLength(8)]]\n    });\n\n    this.loginSubscriber = this.authStoreSevice\n      .storeSelect()\n      .subscribe((response: AuthState) => {\n        if (response.success) {\n          sessionStorage.setItem(\"email\",response.userData.email);\n          sessionStorage.setItem(\"authtoken\",response.userData.authToken);\n          this.router.navigate([\"home\"]);\n        }\n      });\n  }\n\n  public ngOnDestroy() {\n    if (this.loginSubscriber) {\n      this.loginSubscriber.unsubscribe();\n    }\n  }\n\n  public login() {    \n    let loadingState: LoadingState = {\n      isLoading: true,\n      message: \"Authenticating...\"\n    };\n    this.store.dispatch(new LoadingShowRequested(loadingState));\n    this.authStoreSevice.dispatchLoginAction(this.loginForm.value);\n  }\n}\n","<div class=\"login-page-wrapper\">\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-lg-5 col-md-6 col-xs-12 leftside\">\n        <img src=\"assets/images/img-leftside-login.png\" alt=\"Corona front ene image\">        \n      </div>\n      <div class=\"col-lg-7 col-md-6 col-xs-12 rightside\">\n        <div class=\"login-form-wrapper\">\n          <div class=\"logo-title\">\n            Covid-19 Tracker\n          </div>\n          <div class=\"info-title\">\n            Welcome back!Please login to your account.           \n          </div>\n          <div class=\"login-form\">\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n              <div class=\"form-group\">\n                <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email\" formControlName=\"email\"\n                  name=\"email\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Email\" />                  \n                <span *ngIf=\"\n                    (loginForm.get('email').dirty ||\n                      loginForm.get('email').touched) &&\n                    !loginForm.get('email').valid\n                  \" class=\"form-field-error\">\n                  <span *ngIf=\"\n                      loginForm.get('email')?.errors?.email;\n                      else emailRequire\n                    \">Email is not valid.</span>\n                  <ng-template #emailRequire>\n                    <span>Email is required..</span>\n                  </ng-template>\n                </span>\n              </div>\n\n              <div class=\"form-group\">\n                <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"password\"\n                  formControlName=\"password\" name=\"password\" autocomplete=\"true\" data-toggle=\"tooltip\"\n                  data-placement=\"top\" title=\"password\" />\n                <span *ngIf=\"\n                    (loginForm.get('password').dirty ||\n                      loginForm.get('password').touched) &&\n                    !loginForm.get('password').valid\n                  \" class=\"form-field-error\">\n                  <span *ngIf=\"\n                      loginForm.get('password')?.errors?.minlength;\n                      else passwordRequire\n                    \">Password should be minimum 8 characters long.</span>\n                  <ng-template #passwordRequire>\n                    <span>Password is required.</span>\n                  </ng-template>\n                </span>\n              </div>             \n\n              <div class=\"action-btns-row\">              \n                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!loginForm.valid\">\n                  Login\n                </button>\n              </div>\n            </form>\n          </div>         \n        </div>\n      </div>\n    </div>\n  </div>\n</div>"]}